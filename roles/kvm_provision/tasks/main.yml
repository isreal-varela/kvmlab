---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_distribution }}.yml"

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# START: Pre-requisites block

- name: Process pre-requisites
  block:

    - name: Pre-requisite package list
      debug:
        var: kvm_prereq_pkgs
        verbosity: 2

    - name: Ensure requirements in place
      package:
        name:
          "{{ kvm_prereq_pkgs }}"
        # Look in roles/kvm_provision/vars/R*.yml files for list of packages
        state: present
      become: true

  when: not( skip_prereqs | default(false) )

# END: Pre-requisites block
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

- name: Get VMs list
  become: true
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: false

# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
# START: Create VM block

- name: Create VM if not exists
  block:

    - name: Show initial VM config variables
      debug:
        msg:
          - "For 'vm_name' = '{{ vm_name }}', using the following initial parameters:"
          - "          vm_item_name: '{{ vm_item_name }}'"
          - "       base_image_name: '{{ base_image_name }}'"
          - "      libvirt_pool_dir: '{{ libvirt_pool_dir }}'"
          - "  ansible_user_ssh_key: '{{ ansible_user_ssh_key }}'"
          - "              vm_vcpus: {{ vm_vcpus }}"
          - "             vm_ram_mb: {{ vm_ram_mb }}"
          - "          vm_root_disk: '{{ vm_root_disk }}'"
          - "                vm_net: '{{ vm_net }}'"
          - "            vm_ip_addr: {{ vm_ip_addr }}"
          - "              vm_roles: '{{ vm_roles }}'"
        verbosity: 0

    - name: Create KVM-specific folder within libvirt
      become: true
      ansible.builtin.file:
        path: "{{ libvirt_pool_dir }}/{{ vm_name }}"
        owner: qemu
        group: libvirt
        state: directory
        mode: '0775'

    - name: Copy base image to KVM-specific folder
      become: true
      copy:
        src: "{{ libvirt_pool_dir }}/{{ base_image_name }}"
        dest: "{{ libvirt_pool_dir }}/{{ vm_name }}/disk01.qcow2"
        force: false
        remote_src: true
        owner: qemu
        group: libvirt
        mode: 0600
      register: copy_results

    - name: Copy cloud-init meta data
      template: "src=meta-data.j2 dest={{ cloud_init_meta_data }} mode=0777 owner=qemu group=libvirt"
      become: true
    - name: Copy cloud-init user data
      template: "src=user-data.j2 dest={{ cloud_init_user_data }} mode=0777 owner=qemu group=libvirt"
      become: true
    - name: Copy cloud-init network config
      template: "src=network-config.j2 dest={{ cloud_init_network_config }} mode=0777 owner=qemu group=libvirt"
      become: true

    - name: Configure the cloud-init iso
      become: true
      command: |
        genisoimage -output {{ libvirt_pool_dir }}/{{ vm_name }}/firstboot.iso -V cidata -r -J {{ cloud_init_user_data }} {{ cloud_init_meta_data }} {{ cloud_init_network_config }}

    - name: Define vm
      become: true
      community.libvirt.virt:
        command: define
        autostart: true
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"

    - name: Resize root disk
      become: true
      command: |
        qemu-img resize {{ libvirt_pool_dir }}/{{ vm_name }}/disk01.qcow2 {{ vm_root_disk }}
      when: ( vm_root_disk != vm_disk )

  when: ( vm_name not in existing_vms.list_vms )

# END: Create VM block
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

- name: Ensure VM is started
  become: true
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: "vm_start_results is success"
  retries: 15
  delay: 2

- name: Add host to overarching 'kvms' group
  ansible.builtin.add_host:
    hostname: "{{ vm_name }}"
    groups: "kvms"

- name: Add host to specified groups (based on roles)
  ansible.builtin.add_host:
    hostname: "{{ vm_name }}"
    groups: "{{ vm_roles }}"

